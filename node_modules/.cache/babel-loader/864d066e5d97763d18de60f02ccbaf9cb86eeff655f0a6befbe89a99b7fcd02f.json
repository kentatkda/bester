{"ast":null,"code":"import { isNone } from '../../animation/utils/is-none.mjs';\nimport { getVariableValue } from './utils/css-variables-conversion.mjs';\nimport { isCSSVariableToken } from './utils/is-css-variable.mjs';\nimport { positionalKeys, isNumOrPxType, removeNonTranslationalTransform, positionalValues } from './utils/unit-conversion.mjs';\nimport { findDimensionValueType } from './value-types/dimensions.mjs';\nimport { KeyframeResolver } from '../utils/KeyframesResolver.mjs';\nimport { makeNoneKeyframesAnimatable } from '../html/utils/make-none-animatable.mjs';\nclass DOMKeyframesResolver extends KeyframeResolver {\n  constructor(unresolvedKeyframes, onComplete, name, motionValue) {\n    super(unresolvedKeyframes, onComplete, name, motionValue, motionValue === null || motionValue === void 0 ? void 0 : motionValue.owner, true);\n  }\n  readKeyframes() {\n    const {\n      unresolvedKeyframes,\n      element,\n      name\n    } = this;\n    if (!element.current) return;\n    super.readKeyframes();\n    /**\r\n     * If any keyframe is a CSS variable, we need to find its value by sampling the element\r\n     */\n    for (let i = 0; i < unresolvedKeyframes.length; i++) {\n      const keyframe = unresolvedKeyframes[i];\n      if (typeof keyframe === \"string\" && isCSSVariableToken(keyframe)) {\n        const resolved = getVariableValue(keyframe, element.current);\n        if (resolved !== undefined) {\n          unresolvedKeyframes[i] = resolved;\n        }\n      }\n    }\n    /**\r\n     * Check to see if unit type has changed. If so schedule jobs that will\r\n     * temporarily set styles to the destination keyframes.\r\n     * Skip if we have more than two keyframes or this isn't a positional value.\r\n     * TODO: We can throw if there are multiple keyframes and the value type changes.\r\n     */\n    if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {\n      return this.resolveNoneKeyframes();\n    }\n    const [origin, target] = unresolvedKeyframes;\n    const originType = findDimensionValueType(origin);\n    const targetType = findDimensionValueType(target);\n    /**\r\n     * Either we don't recognise these value types or we can animate between them.\r\n     */\n    if (originType === targetType) return;\n    /**\r\n     * If both values are numbers or pixels, we can animate between them by\r\n     * converting them to numbers.\r\n     */\n    if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {\n      for (let i = 0; i < unresolvedKeyframes.length; i++) {\n        const value = unresolvedKeyframes[i];\n        if (typeof value === \"string\") {\n          unresolvedKeyframes[i] = parseFloat(value);\n        }\n      }\n    } else {\n      /**\r\n       * Else, the only way to resolve this is by measuring the element.\r\n       */\n      this.needsMeasurement = true;\n    }\n  }\n  resolveNoneKeyframes() {\n    const {\n      unresolvedKeyframes,\n      name\n    } = this;\n    const noneKeyframeIndexes = [];\n    for (let i = 0; i < unresolvedKeyframes.length; i++) {\n      if (isNone(unresolvedKeyframes[i])) {\n        noneKeyframeIndexes.push(i);\n      }\n    }\n    if (noneKeyframeIndexes.length) {\n      makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);\n    }\n  }\n  unsetTransforms() {\n    const {\n      element,\n      name,\n      unresolvedKeyframes\n    } = this;\n    if (!element.current) return;\n    this.removedTransforms = removeNonTranslationalTransform(element);\n    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n    element.getValue(name, finalKeyframe).jump(finalKeyframe, false);\n  }\n  measureInitialState() {\n    const {\n      element,\n      unresolvedKeyframes,\n      name\n    } = this;\n    if (!element.current) return;\n    if (name === \"height\") {\n      this.suspendedScrollY = window.pageYOffset;\n    }\n    this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n    unresolvedKeyframes[0] = this.measuredOrigin;\n  }\n  renderEndStyles() {\n    this.element.render();\n  }\n  measureEndState() {\n    var _a;\n    const {\n      element,\n      name,\n      unresolvedKeyframes\n    } = this;\n    if (!element.current) return;\n    const value = element.getValue(name);\n    value && value.jump(this.measuredOrigin, false);\n    const finalKeyframeIndex = unresolvedKeyframes.length - 1;\n    const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];\n    unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n    if (finalKeyframe !== null) {\n      this.finalKeyframe = finalKeyframe;\n    }\n    if (name === \"height\" && this.suspendedScrollY !== undefined) {\n      window.scrollTo(0, this.suspendedScrollY);\n    }\n    // If we removed transform values, reapply them before the next render\n    if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {\n      this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {\n        element.getValue(unsetTransformName).set(unsetTransformValue);\n      });\n    }\n    this.resolveNoneKeyframes();\n  }\n}\nexport { DOMKeyframesResolver };","map":{"version":3,"names":["isNone","getVariableValue","isCSSVariableToken","positionalKeys","isNumOrPxType","removeNonTranslationalTransform","positionalValues","findDimensionValueType","KeyframeResolver","makeNoneKeyframesAnimatable","DOMKeyframesResolver","constructor","unresolvedKeyframes","onComplete","name","motionValue","owner","readKeyframes","element","current","i","length","keyframe","resolved","undefined","has","resolveNoneKeyframes","origin","target","originType","targetType","value","parseFloat","needsMeasurement","noneKeyframeIndexes","push","unsetTransforms","removedTransforms","finalKeyframe","getValue","jump","measureInitialState","suspendedScrollY","window","pageYOffset","measuredOrigin","measureViewportBox","getComputedStyle","renderEndStyles","render","measureEndState","_a","finalKeyframeIndex","scrollTo","forEach","unsetTransformName","unsetTransformValue","set"],"sources":["C:/Users/MEIP-users/Desktop/codes/react-ts/node_modules/framer-motion/dist/es/render/dom/DOMKeyframesResolver.mjs"],"sourcesContent":["import { isNone } from '../../animation/utils/is-none.mjs';\r\nimport { getVariableValue } from './utils/css-variables-conversion.mjs';\r\nimport { isCSSVariableToken } from './utils/is-css-variable.mjs';\r\nimport { positionalKeys, isNumOrPxType, removeNonTranslationalTransform, positionalValues } from './utils/unit-conversion.mjs';\r\nimport { findDimensionValueType } from './value-types/dimensions.mjs';\r\nimport { KeyframeResolver } from '../utils/KeyframesResolver.mjs';\r\nimport { makeNoneKeyframesAnimatable } from '../html/utils/make-none-animatable.mjs';\r\n\r\nclass DOMKeyframesResolver extends KeyframeResolver {\r\n    constructor(unresolvedKeyframes, onComplete, name, motionValue) {\r\n        super(unresolvedKeyframes, onComplete, name, motionValue, motionValue === null || motionValue === void 0 ? void 0 : motionValue.owner, true);\r\n    }\r\n    readKeyframes() {\r\n        const { unresolvedKeyframes, element, name } = this;\r\n        if (!element.current)\r\n            return;\r\n        super.readKeyframes();\r\n        /**\r\n         * If any keyframe is a CSS variable, we need to find its value by sampling the element\r\n         */\r\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\r\n            const keyframe = unresolvedKeyframes[i];\r\n            if (typeof keyframe === \"string\" && isCSSVariableToken(keyframe)) {\r\n                const resolved = getVariableValue(keyframe, element.current);\r\n                if (resolved !== undefined) {\r\n                    unresolvedKeyframes[i] = resolved;\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * Check to see if unit type has changed. If so schedule jobs that will\r\n         * temporarily set styles to the destination keyframes.\r\n         * Skip if we have more than two keyframes or this isn't a positional value.\r\n         * TODO: We can throw if there are multiple keyframes and the value type changes.\r\n         */\r\n        if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {\r\n            return this.resolveNoneKeyframes();\r\n        }\r\n        const [origin, target] = unresolvedKeyframes;\r\n        const originType = findDimensionValueType(origin);\r\n        const targetType = findDimensionValueType(target);\r\n        /**\r\n         * Either we don't recognise these value types or we can animate between them.\r\n         */\r\n        if (originType === targetType)\r\n            return;\r\n        /**\r\n         * If both values are numbers or pixels, we can animate between them by\r\n         * converting them to numbers.\r\n         */\r\n        if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {\r\n            for (let i = 0; i < unresolvedKeyframes.length; i++) {\r\n                const value = unresolvedKeyframes[i];\r\n                if (typeof value === \"string\") {\r\n                    unresolvedKeyframes[i] = parseFloat(value);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            /**\r\n             * Else, the only way to resolve this is by measuring the element.\r\n             */\r\n            this.needsMeasurement = true;\r\n        }\r\n    }\r\n    resolveNoneKeyframes() {\r\n        const { unresolvedKeyframes, name } = this;\r\n        const noneKeyframeIndexes = [];\r\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\r\n            if (isNone(unresolvedKeyframes[i])) {\r\n                noneKeyframeIndexes.push(i);\r\n            }\r\n        }\r\n        if (noneKeyframeIndexes.length) {\r\n            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);\r\n        }\r\n    }\r\n    unsetTransforms() {\r\n        const { element, name, unresolvedKeyframes } = this;\r\n        if (!element.current)\r\n            return;\r\n        this.removedTransforms = removeNonTranslationalTransform(element);\r\n        const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\r\n        element.getValue(name, finalKeyframe).jump(finalKeyframe, false);\r\n    }\r\n    measureInitialState() {\r\n        const { element, unresolvedKeyframes, name } = this;\r\n        if (!element.current)\r\n            return;\r\n        if (name === \"height\") {\r\n            this.suspendedScrollY = window.pageYOffset;\r\n        }\r\n        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\r\n        unresolvedKeyframes[0] = this.measuredOrigin;\r\n    }\r\n    renderEndStyles() {\r\n        this.element.render();\r\n    }\r\n    measureEndState() {\r\n        var _a;\r\n        const { element, name, unresolvedKeyframes } = this;\r\n        if (!element.current)\r\n            return;\r\n        const value = element.getValue(name);\r\n        value && value.jump(this.measuredOrigin, false);\r\n        const finalKeyframeIndex = unresolvedKeyframes.length - 1;\r\n        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];\r\n        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\r\n        if (finalKeyframe !== null) {\r\n            this.finalKeyframe = finalKeyframe;\r\n        }\r\n        if (name === \"height\" && this.suspendedScrollY !== undefined) {\r\n            window.scrollTo(0, this.suspendedScrollY);\r\n        }\r\n        // If we removed transform values, reapply them before the next render\r\n        if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {\r\n            this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {\r\n                element\r\n                    .getValue(unsetTransformName)\r\n                    .set(unsetTransformValue);\r\n            });\r\n        }\r\n        this.resolveNoneKeyframes();\r\n    }\r\n}\r\n\r\nexport { DOMKeyframesResolver };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}